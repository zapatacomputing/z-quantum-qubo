# Workflow API version
apiVersion: io.orquestra.workflow/1.0.0

# Prefix for workflow ID
name: qubo-example

imports:
- name: z-quantum-core
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/z-quantum-core.git"
    branch: "master"
- name: z-quantum-qubo
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/z-quantum-qubo.git"
    branch: "master"


steps:
- name: generate-random-qubo
  config:
    runtime:
      language: python3
      imports: [z-quantum-core, z-quantum-qubo]
      parameters:
        file: z-quantum-qubo/steps/qubo.py
        function: generate_random_qubo
  inputs:
  - size: 5
    type: int
  - seed: 1000
    type: int

  outputs:
  - name: qubo
    type: qubo

- name: get-qubo-solution-exact
  passed: [generate-random-qubo]
  config:
    runtime:
      language: python3
      imports: [z-quantum-core, z-quantum-qubo]
      parameters:
        file: z-quantum-qubo/steps/solvers.py
        function: solve_qubo
  inputs:
  - qubo: ((generate-random-qubo.qubo))
    type: qubo
  - solver_specs:
      module_name: dimod
      function_name: ExactSolver
    type: specs
  # - sampler_params: null
  #   type: specs

  outputs:
  - name: solution
    type: measurements
  - name: sampleset
    type: sampleset

- name: get-qubo-solution-with-neal
  passed: [generate-random-qubo]
  config:
    runtime:
      language: python3
      imports: [z-quantum-core, z-quantum-qubo]
      parameters:
        file: z-quantum-qubo/steps/solvers.py
        function: solve_qubo
  inputs:
  - qubo: ((generate-random-qubo.qubo))
    type: qubo
  - solver_specs:
      module_name: neal
      function_name: SimulatedAnnealingSampler
    type: specs
  - sampler_params:
      num_reads: 100
      num_sweeps: 1000
      beta_range: [0.1, 4.2]
      beta_schedule_type: geometric
      initial_states_generator: random
    type: specs
  outputs:
  - name: solution
    type: measurements
  - name: sampleset
    type: sampleset

types:
- qubo
- measurements
- sampleset
- specs
